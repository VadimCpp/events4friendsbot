const admin = require('firebase-admin');
const firebaseServiceAccount = require('./config/firebase-adminsdk.json');

class MyFirstBotApp {

    /**
     * @public
     */
    constructor() {
        console.log('');
        console.log('[MyFirstBotApp]: Create Application...');

        /**
         * @type {string}
         * @private
         */
        this._myWebsite = 'vadimcpp.ru';

        
        /**
         * @type {Object}
         * @private
         */
        this._firebaseApp = admin.initializeApp({
            credential: admin.credential.cert(firebaseServiceAccount),
            databaseURL: process.env.DATABASE_URL
        }, 'events4friends-bot');

        console.log(' 2Ô∏è‚É£  [MyFirstBotApp]: Connected as ' + this._firebaseApp.name);        
    }

    getInfo = (aCallback) => {
        const db = this._firebaseApp.firestore();
        db.collection("services").get()
        .then(function(querySnapshot) {
            const services = querySnapshot.docs.map(item => ({ ...item.data(), id: item.id }))
            
            db.collection("events").get()
            .then(function(querySnapshot) {
                const events = querySnapshot.docs.map(item => ({ ...item.data(), id: item.id }))
                
                let message = '';
                
                if (events.length > 0) {
                    message += `–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${events.length}\n\n`;
                } else {
                    message += '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç\n\n';
                }

                if (services.length > 0) {
                    message += `–£—Å–ª—É–≥–∏: ${services.length}`;
                } else {
                    message += '–£—Å–ª—É–≥  –Ω–µ—Ç'
                }
                
                aCallback(message)
            })
            .catch(function(error) {
                console.warn("Error getting services, skip: ", error);
                aCallback(
                    '–£–≤—ã, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. ' + 
                    '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: @frontendbasics'
                );
            });
        })
        .catch(function(error) {
            console.warn("Error getting services, skip: ", error);
            aCallback(
                '–£–≤—ã, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. ' + 
                '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É: @frontendbasics'
            );
        });
    }

    /**
     * Main event handler
     *
     * @param {Object} msg
     * @param {Object} bot
     * @public
     */
    handleMessage(msg, bot) {

        //
        // TODO: view logs on your server
        //
        console.log('');
        console.log(JSON.stringify(msg));

        /**
         * @type {string}
         */
        let messageText = msg.text;

        if (messageText === '/start') {
            messageText =
                '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ' + this._getName(msg) + ".\n\n" +
                '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–∞ @events4friends. ' + 
                '–ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–∞–π—Ç–µ [events4friend.ru](https://events4friends.ru/) ' + 
                '–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–∞—Ç–∞.\n\n' +
                '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /info, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.';
            bot.sendMessage(msg.chat.id, messageText, {                
                parse_mode: "Markdown",
                disable_web_page_preview: true,                        
            });                
    
        } else if (messageText === '/info') {
            this.getInfo((aMessage) => {
                bot.sendMessage(msg.chat.id, aMessage, {                
                    parse_mode: "Markdown",
                    disable_web_page_preview: true,                        
                });                 
            })
        } else {
            messageText =
                '–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ' + this._getName(msg) + ".\n\n" +
                '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /info, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö.';
            bot.sendMessage(msg.chat.id, messageText, {                
                parse_mode: "Markdown",
                disable_web_page_preview: true,                        
            });                
        }
    }

    /**
     * @param {Object} msg
     * @return {string}
     * @private
     */
    _getName(msg) {
        /**
         * @type {string}
         */
        let result = '–ë–µ–∑ –∏–º–µ–Ω–∏ üë§';

        /**
         * @type {string}
         */
        let fname = msg.from.first_name;

        /**
         * @type {string}
         */
        let lname = msg.from.last_name;

        /**
         * @type {string}
         */
        let uname = msg.from.username;

        if (fname) {
            result = fname + ( lname ? ' ' + lname : '') ;    
        } else if (uname) {
            result = uname;
        }

        return result;
    }
}

module.exports = MyFirstBotApp;
